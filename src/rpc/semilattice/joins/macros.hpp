// Copyright 2010-2013 RethinkDB, all rights reserved.
#ifndef RPC_SEMILATTICE_JOINS_MACROS_HPP_
#define RPC_SEMILATTICE_JOINS_MACROS_HPP_

/* This file is automatically generated by '../scripts/generate_join_macros.py'.
Please modify '../scripts/generate_join_macros.py' instead of modifying this file.*/

#define RDB_DECLARE_EQUALITY_COMPARABLE(type_t) \
  bool operator==(const type_t &, const type_t &)
#define RDB_MAKE_EQUALITY_COMPARABLE_0(type_t) \
    inline bool operator==(UNUSED const type_t &_a_, UNUSED const type_t &_b_) { \
        return true; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_0(type_t) \
    bool operator==(UNUSED const type_t &_a_, UNUSED const type_t &_b_) { \
        return true; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_0(type_t) \
    bool operator==(UNUSED const type_t &_a_) const { \
        return true; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_1(type_t, field1) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_1(type_t, field1) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_1(type_t, field1) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_2(type_t, field1, field2) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_2(type_t, field1, field2) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_2(type_t, field1, field2) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_3(type_t, field1, field2, field3) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_3(type_t, field1, field2, field3) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_3(type_t, field1, field2, field3) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_4(type_t, field1, field2, field3, field4) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_4(type_t, field1, field2, field3, field4) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_4(type_t, field1, field2, field3, field4) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_5(type_t, field1, field2, field3, field4, field5) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_5(type_t, field1, field2, field3, field4, field5) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_5(type_t, field1, field2, field3, field4, field5) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_6(type_t, field1, field2, field3, field4, field5, field6) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_7(type_t, field1, field2, field3, field4, field5, field6, field7) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_8(type_t, field1, field2, field3, field4, field5, field6, field7, field8) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_9(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_10(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_11(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_12(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_13(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_14(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_15(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14 && field15 == _a_.field15; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_16(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14 && field15 == _a_.field15 && field16 == _a_.field16; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_17(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14 && field15 == _a_.field15 && field16 == _a_.field16 && field17 == _a_.field17; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17 && _a_.field18 == _b_.field18; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17 && _a_.field18 == _b_.field18; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_18(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14 && field15 == _a_.field15 && field16 == _a_.field16 && field17 == _a_.field17 && field18 == _a_.field18; \
    } \
    friend class equality_force_semicolon_declaration_t

#define RDB_MAKE_EQUALITY_COMPARABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    inline bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17 && _a_.field18 == _b_.field18 && _a_.field19 == _b_.field19; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_IMPL_EQUALITY_COMPARABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    bool operator==(const type_t &_a_, const type_t &_b_) { \
        return _a_.field1 == _b_.field1 && _a_.field2 == _b_.field2 && _a_.field3 == _b_.field3 && _a_.field4 == _b_.field4 && _a_.field5 == _b_.field5 && _a_.field6 == _b_.field6 && _a_.field7 == _b_.field7 && _a_.field8 == _b_.field8 && _a_.field9 == _b_.field9 && _a_.field10 == _b_.field10 && _a_.field11 == _b_.field11 && _a_.field12 == _b_.field12 && _a_.field13 == _b_.field13 && _a_.field14 == _b_.field14 && _a_.field15 == _b_.field15 && _a_.field16 == _b_.field16 && _a_.field17 == _b_.field17 && _a_.field18 == _b_.field18 && _a_.field19 == _b_.field19; \
    } \
    extern int equality_force_semicolon_declaration
#define RDB_MAKE_ME_EQUALITY_COMPARABLE_19(type_t, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19) \
    bool operator==(const type_t &_a_) const { \
        return field1 == _a_.field1 && field2 == _a_.field2 && field3 == _a_.field3 && field4 == _a_.field4 && field5 == _a_.field5 && field6 == _a_.field6 && field7 == _a_.field7 && field8 == _a_.field8 && field9 == _a_.field9 && field10 == _a_.field10 && field11 == _a_.field11 && field12 == _a_.field12 && field13 == _a_.field13 && field14 == _a_.field14 && field15 == _a_.field15 && field16 == _a_.field16 && field17 == _a_.field17 && field18 == _a_.field18 && field19 == _a_.field19; \
    } \
    friend class equality_force_semicolon_declaration_t

#endif  // RPC_SEMILATTICE_JOINS_MACROS_HPP_
