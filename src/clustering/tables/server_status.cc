// Copyright 2010-2014 RethinkDB, all rights reserved.
#include "clustering/tables/server_status.hpp"

// TODO: Trim includes
#include "clustering/auth/user_fut.hpp"
#include "clustering/datum_adapter.hpp"
#include "clustering/real_reql_cluster_interface.hpp"  // for table_already_exists_error
#include "clustering/tables/table_metadata.hpp"
#include "containers/archive/string_stream.hpp"
#include "containers/uuid.hpp"
#include "fdb/index.hpp"
#include "fdb/retry_loop.hpp"
#include "fdb/system_tables.hpp"
#include "fdb/typed.hpp"
#include "rdb_protocol/terms/write_hook.hpp"
#include "rdb_protocol/reqlfdb_config_cache_functions.hpp"

server_status_artificial_table_fdb_backend_t::server_status_artificial_table_fdb_backend_t(
        admin_identifier_format_t _identifier_format)
    : artificial_table_fdb_backend_t(
        name_string_t::guarantee_valid("server_status")),
      identifier_format(_identifier_format) {
}

server_status_artificial_table_fdb_backend_t::~server_status_artificial_table_fdb_backend_t() {
}


bool server_status_artificial_table_fdb_backend_t::read_all_rows_as_vector(
        FDBDatabase *fdb,
        auth::user_context_t const &user_context,
        const signal_t *interruptor,
        std::vector<ql::datum_t> *rows_out,
        admin_err_t *error_out) {
    // TODO: Implement.
    *error_out = admin_err_t{
        "server_status read_all_rows_as_vector not implemented.",
        query_state_t::FAILED};
    (void)fdb, (void)user_context, (void)interruptor, (void)rows_out;
    return false;
}

bool server_status_artificial_table_fdb_backend_t::read_row(
        FDBTransaction *txn,
        auth::user_context_t const &user_context,
        ql::datum_t primary_key,
        const signal_t *interruptor,
        ql::datum_t *row_out,
        admin_err_t *error_out) {
    *error_out = admin_err_t{
        "server_status read_row not implemented.",
        query_state_t::FAILED};
    (void)txn, (void)user_context, (void)primary_key, (void)interruptor, (void)row_out;
    return false;
}


bool server_status_artificial_table_fdb_backend_t::write_row(
        FDBTransaction *txn,
        auth::user_context_t const &user_context,
        ql::datum_t primary_key,
        bool pkey_was_autogenerated,
        ql::datum_t *new_value_inout,
        const signal_t *interruptor,
        admin_err_t *error_out) {
    *error_out = admin_err_t{
        "server_status write_row not implemented.",
        query_state_t::FAILED};
    (void)txn, (void)user_context, (void)primary_key, (void)pkey_was_autogenerated, (void)new_value_inout, (void)interruptor;
    return false;
}
