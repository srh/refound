// Copyright 2010-2014 RethinkDB, all rights reserved.
#include "clustering/tables/stats.hpp"

#include "clustering/datum_adapter.hpp"
#include "clustering/tables/server_config.hpp"
#include "containers/uuid.hpp"
#include "fdb/index.hpp"
#include "fdb/retry_loop.hpp"
#include "fdb/system_tables.hpp"
#include "fdb/typed.hpp"
#include "rdb_protocol/reqlfdb_config_cache_functions.hpp"

stats_artificial_table_fdb_backend_t::stats_artificial_table_fdb_backend_t(
        admin_identifier_format_t _identifier_format)
    : artificial_table_fdb_backend_t(
        name_string_t::guarantee_valid("stats")),
      identifier_format(_identifier_format) {
}

stats_artificial_table_fdb_backend_t::~stats_artificial_table_fdb_backend_t() {
}

bool stats_artificial_table_fdb_backend_t::read_all_rows_as_vector(
        UNUSED FDBDatabase *fdb,
        UNUSED auth::user_context_t const &user_context,
        UNUSED const signal_t *interruptor,
        std::vector<ql::datum_t> *rows_out,
        UNUSED admin_err_t *error_out) {
    // The table is empty.
    std::vector<ql::datum_t> result;
    *rows_out = std::move(result);
    return true;
}

bool stats_artificial_table_fdb_backend_t::read_row(
        UNUSED FDBTransaction *txn,
        UNUSED auth::user_context_t const &user_context,
        UNUSED ql::datum_t primary_key,
        UNUSED const signal_t *interruptor,
        ql::datum_t *row_out,
        UNUSED admin_err_t *error_out) {
    // The table is empty.
    *row_out = ql::datum_t::null();
    return true;
}


bool stats_artificial_table_fdb_backend_t::write_row(
        UNUSED FDBTransaction *txn,
        UNUSED auth::user_context_t const &user_context,
        UNUSED ql::datum_t primary_key,
        UNUSED bool pkey_was_autogenerated,
        UNUSED ql::datum_t *new_value_inout,
        UNUSED const signal_t *interruptor,
        admin_err_t *error_out) {
    *error_out = admin_err_t{
        "It's illegal to write to the `rethinkdb.stats` table.",
        query_state_t::FAILED};
    return false;
}
