// Copyright 2010-2014 RethinkDB, all rights reserved.
#ifndef CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_
#define CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_

#include <memory>
#include <string>
#include <vector>

#include "containers/uuid.hpp"
#include "rdb_protocol/artificial_table/caching_cfeed_backend.hpp"

/* This is public because it's used by `real_reql_cluster_interface_t`. It's kind of a
trivial function right now, but it will become non-trivial if we ever add more
configuration to databases. */
ql::datum_t convert_db_or_table_config_and_name_to_datum(
        const name_string_t &db_name,
        uuid_u id);


class db_config_artificial_table_fdb_backend_t :
#if RDB_CF
    public caching_cfeed_artificial_table_fdb_backend_t
#else
    public artificial_table_fdb_backend_t
#endif
{
public:
    db_config_artificial_table_fdb_backend_t();
    ~db_config_artificial_table_fdb_backend_t();

    std::string get_primary_key_name() const override;

    bool read_all_rows_as_vector(
            FDBDatabase *fdb,
            auth::user_context_t const &user_context,
            const signal_t *interruptor_on_caller,
            std::vector<ql::datum_t> *rows_out,
            admin_err_t *error_out) override;

    bool read_row(
            FDBTransaction *txn,
            auth::user_context_t const &user_context,
            ql::datum_t primary_key,
            const signal_t *interruptor_on_caller,
            ql::datum_t *row_out,
            admin_err_t *error_out) override;

    bool write_row(
            FDBTransaction *txn,
            auth::user_context_t const &user_context,
            ql::datum_t primary_key,
            bool pkey_is_autogenerated,
            ql::datum_t *new_value_inout,
            const signal_t *interruptor_on_caller,
            admin_err_t *error_out) override;

private:
    DISABLE_COPYING(db_config_artificial_table_fdb_backend_t);
};

#endif /* CLUSTERING_ADMINISTRATION_TABLES_DB_CONFIG_HPP_ */

