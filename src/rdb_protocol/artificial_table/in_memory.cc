#include "rdb_protocol/artificial_table/in_memory.hpp"

#include "arch/timing.hpp"
#include "clustering/administration/auth/user_context.hpp"
#include "random.hpp"
#include "rdb_protocol/serialize_datum.hpp"

/* The purpose of `random_delay()` is to mix things up a bit to increase the
likelihood of exposing a bug in `artificial_table_t`. */
void random_delay(const signal_t *interruptor) {
    if (randint(2) == 0) {
        nap(randint(100), interruptor);
    }
}

std::string in_memory_artificial_table_fdb_backend_t::get_primary_key_name() const {
    return "id";
}

bool in_memory_artificial_table_fdb_backend_t::read_all_rows_as_vector(
        UNUSED FDBDatabase *fdb,
        auth::user_context_t const &user_context,
        const signal_t *interruptor,
        std::vector<ql::datum_t> *rows_out,
        UNUSED admin_err_t *error_out) {
    random_delay(interruptor);
    on_thread_t thread_switcher(home_thread());

    user_context.require_admin_user();

    rows_out->clear();
    for (auto const &item : data) {
        rows_out->push_back(item.second);
    }
    return true;
}

bool in_memory_artificial_table_fdb_backend_t::read_row(
        UNUSED FDBTransaction *txn,
        auth::user_context_t const &user_context,
        ql::datum_t primary_key,
        const signal_t *interruptor,
        ql::datum_t *row_out,
        UNUSED admin_err_t *error_out) {
    random_delay(interruptor);
    on_thread_t thread_switcher(home_thread());

    user_context.require_admin_user();

    auto it = data.find(primary_key.print_primary());
    if (it != data.end()) {
        *row_out = it->second;
    } else {
        *row_out = ql::datum_t::null();
    }
    return true;
}

bool in_memory_artificial_table_fdb_backend_t::write_row(
        UNUSED FDBTransaction *txn,
        auth::user_context_t const &user_context,
        ql::datum_t primary_key,
        UNUSED bool pkey_was_autogenerated,
        ql::datum_t *new_value_inout,
        const signal_t *interruptor,
        UNUSED admin_err_t *error_out) {
    random_delay(interruptor);
    on_thread_t thread_switcher(home_thread());

    user_context.require_admin_user();

    if (new_value_inout->has()) {
        /* Not all datums can be serialized into an actual table (r.minval,
        r.maxval and large arrays in particular). To make the in-memory test
        table behave as closely to an actual table as possible, we attempt to
        serialize the datum, check for errors, and then discard the serialization
        result. */
        {
            write_message_t wm;
            ql::serialization_result_t res = ql::datum_serialize(
                &wm,
                *new_value_inout,
                ql::check_datum_serialization_errors_t::YES);
            if (res & ql::serialization_result_t::ARRAY_TOO_BIG) {
                rfail_typed_target(new_value_inout, "Array too large for disk "
                                   "writes (limit 100,000 elements).");
            } else if (res & ql::serialization_result_t::EXTREMA_PRESENT) {
                rfail_typed_target(new_value_inout, "`r.minval` and `r.maxval` "
                                   "cannot be written to disk.");
            }
            r_sanity_check(!ql::bad(res));
        }

        ql::datum_t primary_key_2 = new_value_inout->get_field("id", ql::NOTHROW);
        guarantee(primary_key_2.has());
        guarantee(primary_key == primary_key_2);
        data[primary_key.print_primary()] = *new_value_inout;
    } else {
        data.erase(primary_key.print_primary());
    }
    return true;
}
